// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: orders.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (id, userId, total, status, address, createdAt, updatedAt, deletedAt) 
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, userid, total, status, address, createdat, updatedat, deletedat
`

type CreateOrderParams struct {
	ID        uuid.UUID
	Userid    uuid.UUID
	Total     string
	Status    OrderStatus
	Address   string
	Createdat time.Time
	Updatedat time.Time
	Deletedat sql.NullTime
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.ID,
		arg.Userid,
		arg.Total,
		arg.Status,
		arg.Address,
		arg.Createdat,
		arg.Updatedat,
		arg.Deletedat,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.Total,
		&i.Status,
		&i.Address,
		&i.Createdat,
		&i.Updatedat,
		&i.Deletedat,
	)
	return i, err
}

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (id, orderId, productId, quantity, price) 
VALUES ($1, $2, $3, $4, $5)
RETURNING id, orderid, productid, quantity, price
`

type CreateOrderItemParams struct {
	ID        uuid.UUID
	Orderid   uuid.UUID
	Productid uuid.UUID
	Quantity  int32
	Price     string
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, createOrderItem,
		arg.ID,
		arg.Orderid,
		arg.Productid,
		arg.Quantity,
		arg.Price,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.Orderid,
		&i.Productid,
		&i.Quantity,
		&i.Price,
	)
	return i, err
}
